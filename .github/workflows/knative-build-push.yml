name: Build and Push Knative Functions

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      function_path:
        description: 'Function path to build and deploy (leave empty for all functions)'
        required: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Knative func CLI
        run: |
          curl -L -o func https://github.com/knative/func/releases/download/knative-v1.9.2/func_linux_amd64
          chmod +x func
          sudo mv func /usr/local/bin/func

      - name: Find and process functions
        run: |
          # Function to check if Docker image exists
          function image_exists() {
            local image_tag=$1
            # Extract username, repository and tag
            local repo_tag=${image_tag#*/}
            local repo=${repo_tag%:*}
            local tag=${repo_tag#*:}
            
            # Check if image exists using Docker Hub API
            http_code=$(curl -s -o /dev/null -w "%{http_code}" \
              "https://hub.docker.com/v2/repositories/${repo}/tags/${tag}/")
            
            if [ "$http_code" -eq 200 ]; then
              return 0  # Image exists
            else
              return 1  # Image doesn't exist
            fi
          }
          
          # Determine which functions to process
          if [ -n "${{ github.event.inputs.function_path }}" ]; then
            # Use manually specified function path
            FUNCTION_DIRS="${{ github.event.inputs.function_path }}"
          else
            # Find all directories with func.yaml
            FUNCTION_DIRS=$(find . -name "func.yaml" -type f | xargs dirname | sort)
          fi
          
          # Process each function
          for DIR in $FUNCTION_DIRS; do
            echo "Processing function in $DIR"
            cd $GITHUB_WORKSPACE
            cd $DIR
            
            # Extract image tag from func.yaml
            IMAGE_TAG=$(grep "image:" func.yaml | awk '{print $2}')
            
            if [ -z "$IMAGE_TAG" ]; then
              echo "Warning: No image tag found in $DIR/func.yaml, skipping"
              continue
            fi
            
            echo "Found image tag: $IMAGE_TAG"
            
            # Check if image already exists
            if image_exists "$IMAGE_TAG"; then
              echo "Image $IMAGE_TAG already exists, skipping build"
            else
              echo "Building and pushing $IMAGE_TAG"
              # Build and push the function
              func build --push
            fi
          done

      - name: Deploy to Knative Cluster
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_DATA" > $HOME/.kube/config
          
          # Determine which functions to deploy
          if [ -n "${{ github.event.inputs.function_path }}" ]; then
            # Use manually specified function path
            FUNCTION_DIRS="${{ github.event.inputs.function_path }}"
          else
            # Find all directories with func.yaml
            FUNCTION_DIRS=$(find . -name "func.yaml" -type f | xargs dirname | sort)
          fi
          
          # Deploy each function
          for DIR in $FUNCTION_DIRS; do
            cd $GITHUB_WORKSPACE
            cd $DIR
            
            # Extract image tag from func.yaml
            IMAGE_TAG=$(grep "image:" func.yaml | awk '{print $2}')
            
            if [ -z "$IMAGE_TAG" ]; then
              echo "Warning: No image tag found in $DIR/func.yaml, skipping deployment"
              continue
            fi
            
            echo "Deploying function from $DIR with image $IMAGE_TAG"
            func deploy --push=false 